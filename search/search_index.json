{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DISCLAIMER","text":"<p>Note: The QBank Connect API and all associated business entities and data examples referenced in this documentation are entirely fictional and have been created for the sole purpose of demonstrating:</p> <ul> <li> <p>Skill in API documentation</p> </li> <li> <p>Skill in SDK documentation</p> </li> <li> <p>Skill in docs-as-code workflows and tooling</p> </li> <li> <p>General technical writing skills</p> </li> </ul>"},{"location":"#welcome-to-qbank-connect-api","title":"Welcome to QBank Connect API","text":"<p>The QBank Connect API provides secure, reliable, and real-time access to core banking services, empowering ERP and treasury platforms to seamlessly integrate financial operations.</p> <p>Our documentation is designed around three pillars to accelerate your integration:</p> <ol> <li>Guides: Conceptual explanations of our hybrid architecture and critical workflows.</li> <li>API Reference: The definitive contract for every endpoint, auto-generated from the OpenAPI Specification.</li> <li>SDKs: Idiomatic libraries for faster, type-safe development.</li> </ol>"},{"location":"#strategic-capabilities","title":"Strategic Capabilities","text":"<p>QBank Connect is built for enterprise operations, specializing in:</p> <ul> <li>Real-Time Cash Positioning: Instant access to <code>/balances</code> for timely liquidity management.</li> <li>Secure Payment Initiation: Idempotent ACH, Wire, and Payable submission workflows.</li> <li>Fraud Prevention: Two-way Positive Pay integration for check issue and exception management.<sup>1</sup> <sup>2</sup></li> <li>Compliance: Detailed audit logging and mandatory security headers for SOX and PCI DSS requirements.<sup>3</sup> <sup>4</sup></li> </ul> <p>Begin your journey with Getting Started page to set up your authentication credentials.</p>"},{"location":"#references","title":"References","text":"<ol> <li> <p>Positive Pay System Requirements, ABA Standards (Conceptual Reference).\u00a0\u21a9</p> </li> <li> <p>Payments API Integration Guide, \"Handling Fraud Exceptions.\"\u00a0\u21a9</p> </li> <li> <p>SOX Audit Control Requirements, Section 404 (Conceptual Reference).\u00a0\u21a9</p> </li> <li> <p>PCI DSS Requirement 10: Track and Monitor All Access to Network Resources and Cardholder Data.\u00a0\u21a9</p> </li> </ol>"},{"location":"01_getting_started/","title":"Getting Started: Onboarding and Authentication","text":"<p>QBank Connect uses the OAuth 2.0 Client Credentials Grant for server-to-server B2B authentication, which is ideal for ERP systems that require automated, non-interactive access to resources.</p>"},{"location":"01_getting_started/#1-partner-onboarding-flow","title":"1. Partner Onboarding Flow","text":"<p>1.1. Registration: Contact your QBank Account Manager to register your ERP platform. You will receive a unique <code>client_id</code> and a secure <code>client_secret</code>.</p> <p>1.2. Scope Approval: During registration, you must specify the exact permissions (scopes) your application requires (e.g., <code>transactions.read</code>, <code>payments.ach.write</code>). This adheres to the principle of least privilege.</p> <p>1.3. Credential Storage: Store the <code>client_id</code> and <code>client_secret</code> securely in an environment vault (e.g., AWS Secrets Manager, Azure Key Vault).</p>"},{"location":"01_getting_started/#2-oauth-20-client-credentials-flow","title":"2. OAuth 2.0 Client Credentials Flow","text":"<p>Your application uses the <code>client_id</code> and <code>client_secret</code> to obtain a short-lived Bearer Token.</p>"},{"location":"01_getting_started/#21-request-an-access-token","title":"2.1. Request an Access Token","text":"<p>Send a <code>POST</code> request to the token endpoint:</p> Field Value Endpoint <code>POST https://auth.qbankconnect.com/token</code> Content-Type <code>application/x-www-form-urlencoded</code> <p>Request Body (Form URL Encoded)</p> Parameter Description <code>grant_type</code> Must be <code>client_credentials</code>. <code>client_id</code> The unique identifier provided during registration. <code>client_secret</code> The secret key provided during registration. <code>scope</code> A space-separated list of required permissions (e.g., <code>accounts.read payments.ach.write</code>)."},{"location":"01_getting_started/#22-handle-the-response","title":"2.2. Handle the Response","text":"<p>A successful response returns the access token, which is valid for a limited time (typically 3600 seconds/1 hour).</p> <pre><code>{\n\"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n\"token_type\": \"Bearer\",\n\"expires_in\": 3600,\n\"scope\": \"accounts.read payments.ach.write\"\n}\n</code></pre>"},{"location":"01_getting_started/#23-api-call-with-the-token","title":"2.3. API Call with the Token","text":"<p>Use the <code>access_token</code> in the <code>Authorization</code> header for all subsequent API calls:</p> Header Value <code>Authorization</code> <code>Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...</code> <p>The QBank SDKs automatically manage this entire token lifecycle, including renewal and expiration handling (see Python SDK).</p>"},{"location":"01_getting_started/#3-quickstart-retrieving-a-real-time-balance","title":"3. Quickstart: Retrieving a Real-Time Balance","text":"<p>To retrieve the current balance for an account, use the <code>/balances</code> endpoint, which is a real-time synchronous call to the core system.</p> Field Value Endpoint <code>GET /v1/balances/{accountId}</code> Scopes Required <code>balances.read</code> <pre><code>curl --location '[https://api.qbankconnect.com/v1/balances/a1b2c3d4-e5f6-7890-1234-567890abcde](https://api.qbankconnect.com/v1/balances/a1b2c3d4-e5f6-7890-1234-567890abcde)' \\\n--header 'Authorization: Bearer &lt;YOUR_ACCESS_TOKEN&gt;'\n</code></pre> <p>This request will return a <code>200 OK</code> response with the <code>available_balance</code> and <code>ledger_balance</code>.</p>"},{"location":"04_compliance_security/","title":"Compliance and Security Manual","text":"<p>Maintaining stringent security and audit controls is mandatory for FinTech integrations. QBank Connect adheres to PCI DSS and SOX standards.</p>"},{"location":"04_compliance_security/#1-audit-logging-requirements-soxpci","title":"1. Audit Logging Requirements (SOX/PCI)","text":"<p>A robust audit trail must be maintained for all financial activities. All API calls, system status changes, and mETL actions are logged in an immutable, structured format (JSON).<sup>1</sup> <sup>2</sup></p>"},{"location":"04_compliance_security/#11-mandatory-audit-log-fields","title":"1.1. Mandatory Audit Log Fields","text":"<p>To ensure compliance, the logs capture:</p> Field Description Compliance Context <code>timestamp</code> UTC time with millisecond precision.<sup>2</sup> <sup>8</sup> SOX (Precise timing of events) <code>actor</code> The authenticated Client ID or user identity.<sup>8</sup> SOX (Who performed the action) <code>entity_impacted</code> The Account ID, Payment ID, or resource affected.<sup>8</sup> SOX (What was affected) <code>request_id</code> The unique request identifier for end-to-end tracing.<sup>9</sup> <sup>8</sup> PCI DSS (Troubleshooting/Investigation) <code>idempotency_key</code> Mandatory for all transactional attempts (if applicable).<sup>10</sup> SOX (Proof of exactly-once execution)"},{"location":"04_compliance_security/#12-non-repudiation-header","title":"1.2. Non-Repudiation Header","text":"<p>For all transactional operations (<code>POST</code>, <code>PUT</code>, <code>PATCH</code>), the following header is highly recommended for audit compliance, especially if the API call is user-initiated within the ERP:</p> Header Name Value Format Description <code>x-fapi-auth-date</code> HTTP-date (e.g., <code>Tue, 11 Sep 2012 19:43:31 GMT</code>) Records the time the end-user (PSU) last authenticated with the client application.<sup>11</sup>"},{"location":"04_compliance_security/#2-transport-and-application-security","title":"2. Transport and Application Security","text":"<p>The following mandatory controls govern how partners connect to QBank Connect, securing the data transmission pipeline and ensuring proper access.</p>"},{"location":"04_compliance_security/#21-tls-enforcement","title":"2.1. TLS Enforcement","text":"<p>All traffic to QBank Connect must use HTTPS (TLS 1.2 or higher). Connections using older, vulnerable TLS versions will be immediately rejected at the API Gateway level to mitigate man-in-the-middle attacks.<sup>3</sup> X.509 certificates are utilized to validate identity and enforce encryption.<sup>3</sup></p>"},{"location":"04_compliance_security/#22-role-based-access-control-rbac","title":"2.2. Role-Based Access Control (RBAC)","text":"<p>Access is strictly governed by the OAuth 2.0 scopes granted to your <code>client_id</code> upon registration (e.g., <code>transactions.read</code> vs. <code>payments.ach.write</code>). Requests attempting to access unauthorized resources will be met with a <code>403 Forbidden</code> response.<sup>4</sup> <sup>5</sup></p>"},{"location":"04_compliance_security/#3-api-versioning-strategy","title":"3. API Versioning Strategy","text":"<p>QBank Connect uses URL-based versioning (e.g., <code>/v1/</code>).</p> <ul> <li> <p>Major Version Change (<code>v1</code> to <code>v2</code>): Only occurs when introducing breaking changes\u2014such as modifying existing payload structures, removing critical fields, or altering resource routing.<sup>6</sup></p> </li> <li> <p>Minor Updates: All non-breaking additions (new endpoints, new optional fields) are rolled out within the existing version and guarantee backward compatibility.<sup>7</sup> <sup>6</sup></p> </li> </ul>"},{"location":"04_compliance_security/#references","title":"References","text":"<ol> <li> <p>QBank Internal Systems Manual, \"Immutable Log Architecture.\"\u00a0\u21a9</p> </li> <li> <p>PCI DSS Requirement 10: Track and Monitor All Access to Network Resources and Cardholder Data.\u00a0\u21a9\u21a9</p> </li> <li> <p>NIST SP 800-52 Rev. 2: Guidelines for TLS Server Configuration.\u00a0\u21a9\u21a9</p> </li> <li> <p>QBank API Security Guide, \"OAuth 2.0 Scope and RBAC Policies.\"\u00a0\u21a9</p> </li> <li> <p>OAuth 2.0 Authorization Framework, RFC 6749 (Conceptual Reference).\u00a0\u21a9</p> </li> <li> <p>QBank API Design Standards, \"Versioning Policy.\"\u00a0\u21a9\u21a9</p> </li> <li> <p>Semantic Versioning 2.0.0 (Conceptual Reference).\u00a0\u21a9</p> </li> <li> <p>SOX Audit Control Requirements, Section 404 (Conceptual Reference).\u00a0\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p>Distributed Tracing Standard, W3C Trace Context (Conceptual Reference).\u00a0\u21a9</p> </li> <li> <p>Idempotency Key Specification, RFC 8142 (Conceptual Reference).\u00a0\u21a9</p> </li> <li> <p>Open Banking (UK) Security Profile: FAPI Compliance and Authentication.\u00a0\u21a9</p> </li> </ol>"},{"location":"05_api_reference/","title":"API Reference","text":"<p>The QBank Connect API Reference is generated directly from our OpenAPI Specification (OAS 3.1), which defines all mandatory parameters, security headers, and schema models.</p>"},{"location":"05_api_reference/#1-reference-source","title":"1. Reference Source","text":"<p>The complete machine-readable specification is available here: openapi.yaml</p>"},{"location":"05_api_reference/#2-endpoint-overview","title":"2. Endpoint Overview","text":"<p>Endpoints are logically grouped by financial resource.</p> Resource Primary Endpoints Latency Key Use Case Account <code>GET /accounts</code> Batch-Latent (Daily) Retrieving general account metadata. Transaction <code>GET /transactions</code> Batch-Latent (Daily) Financial reconciliation using the three date fields (<code>transaction_date</code>, <code>value_date</code>, <code>posting_date</code>). Balance <code>GET /balances/{id}</code> Real-Time Intraday cash positioning and available funds check.<sup>1</sup> <sup>2</sup> ACH <code>POST /payments/ach</code> Asynchronous (15 min batch) Submitting high-volume file transfers.[28] Requires <code>Idempotency-Key</code>. PositivePay <code>POST /positivepay/issues</code>, <code>GET /positivepay/exceptions</code> Asynchronous/Batch Check fraud prevention management.<sup>3</sup> <sup>4</sup> Wire/Transfer <code>POST /payments/wire</code>, <code>POST /transfers</code> Real-Time Immediate fund movement. Requires <code>Idempotency-Key</code>."},{"location":"05_api_reference/#3-standardized-error-response","title":"3. Standardized Error Response","text":"<p>All 4xx and 5xx responses that are not specifically a <code>409 Conflict</code> will return a standardized JSON error object:</p> Field Type Description <code>message</code> String User-friendly explanation. <code>error_code</code> String QBank-specific code for programmatic handling.<sup>5</sup> <code>request_id</code> UUID Unique trace ID for QBank Support (Internal logging).<sup>6</sup>"},{"location":"05_api_reference/#references","title":"References","text":"<ol> <li> <p>QBank Connect SLA, \"API Latency and Data Freshness Profiles.\"\u00a0\u21a9</p> </li> <li> <p>Fiserv CoreAdvance API Integration Guide, \"Direct Connect Latency.\"\u00a0\u21a9</p> </li> <li> <p>QBank Accounting Compliance Memo, \"Posting Date Audit Requirement.\"\u00a0\u21a9</p> </li> <li> <p>Positive Pay System Requirements, ABA Standards (Conceptual Reference).\u00a0\u21a9</p> </li> <li> <p>QBank Developer Documentation, \"Error Code Directory.\"\u00a0\u21a9</p> </li> <li> <p>SOX Audit Control Requirements, Section 404 (Conceptual Reference).\u00a0\u21a9</p> </li> <li> <p>ACH Operating Rules and Guidelines (Conceptual Reference).\u00a0\u21a9</p> </li> </ol>"},{"location":"06_glossary/","title":"Glossary of Terms","text":"<p>This page defines all specialized terms and acronyms that appear in the documentation.</p> <p>ACH (Automated Clearing House) :   The primary electronic funds-transfer network for processing transactions in the United States. Used for payroll, direct deposit, and bill payments.</p> <p>Idempotency :   The property of an operation that, when executed multiple times with the same input, produces the same result (without unintended side effects). Crucial for transactional integrity in distributed systems.</p> <p>OAuth 2.0 Client Credentials Flow :   An authorization flow used when a client (like an $\\text{ERP}$ system) is acting on its own behalf, not on behalf of a user. It uses the <code>client_id</code> and <code>client_secret</code> to obtain an access token.</p> <p>PCI DSS (Payment Card Industry Data Security Standard) :   A set of security standards designed to ensure that all companies that accept, process, store, or transmit credit card information maintain a secure environment.</p> <p>SOX (Sarbanes-Oxley Act) :   U.S. federal law requiring rigorous standards for all U.S. public company boards, management, and public accounting firms. It mandates internal controls, including detailed audit trails and non-repudiation for financial transactions.</p> <p>TLS (Transport Layer Security) :   A cryptographic protocol designed to provide communication security over a computer network. Essential for enforcing $\\text{HTTPS}$ and securing data in transit.</p>"},{"location":"conceptual_guides/02_conceptual_architecture/","title":"Architecture Overview","text":"<p>The QBank Connect architecture was designed to solve the critical challenge of connecting a modern, low-latency API to a legacy banking system. The following sections describe how this is achieved through a hybrid approach.</p>"},{"location":"conceptual_guides/02_conceptual_architecture/#bridging-real-time-and-batch","title":"Bridging Real-Time and Batch","text":"<p>QBank Connect operates on a hybrid architecture, designed to provide a modern, low-latency API experience while ensuring transactional integrity with the legacy Fiserv CoreAdvance core banking system.</p>"},{"location":"conceptual_guides/02_conceptual_architecture/#1-the-hybrid-data-flow-api-to-core","title":"1. The Hybrid Data Flow (API to Core)","text":"<p>The system relies on the mETL (Managed Extract, Transform, Load) Engine to manage asynchronous batch communications with Fiserv CoreAdvance via SFTP.<sup>1</sup><sup>2</sup></p> <p>Here is the visualization of our data flow, which informs data freshness and latency for every endpoint:</p> <pre><code>graph TD\nA[ERP Partner Platform]--&gt;|\"Real-Time: GET /balances, POST /transfers\"|B[\"QBank Connect API Gateway\"]\nA--&gt;|\"Asynchronous: POST /payments/ach\"|B\nB--&gt;C{\"QBank&lt;br&gt;Connect Service&lt;br&gt;&amp; POS\"}\nC--&gt;|\"Immediate Write\"|D[\"QBank Connect DB\"]\nD--&gt;|\"Polls every 15 min\"| E[\"mETL Engine\"]\nE--&gt;|\"Extract &amp; Transform - Fiserv Format\"|F[\"Data Processing\"]\nF--&gt;|\"Fiserv Batch Processing - CoreAdvance\"|G[\"Fiserv CoreAdvance Core\"]\nG--&gt;|\"Nightly EOD File - End of Day\"|F\nF--&gt;|\"mETL EOD Job - 1:00 am\"|E\nE--&gt;|\"Load - Daily Sync\"|D\nD--&gt;|\"GET /transactions, /accounts\"|C</code></pre>"},{"location":"conceptual_guides/02_conceptual_architecture/#2-data-latency-explained","title":"2. Data Latency Explained","text":"<p>Due to this hybrid approach, API resources fall into two critical latency categories <sup>3</sup>:</p> Category Endpoint Examples Source Latency Profile Real-Time Synchronous <code>/balances</code>, <code>/transfers</code>, <code>/payments/wire</code> Direct Fiserv API Call Sub-second latency.<sup>6</sup> <sup>7</sup> Batch-Latent Asynchronous <code>/accounts</code>, <code>/transactions</code>, <code>/reports/nsf</code>, <code>/reports/chargebacks</code> QBank Connect DB (mETL Load) Data is updated once per day, available after the 1:00 am cutoff.<sup>8</sup> <p>Critical Note: Resources retrieved via Batch-Latent endpoints (e.g., Transactions) reflect the state of the account as of the end of the previous business day. Current-day activity will not appear in these reports until the next daily synchronization at 1:00 am.</p>"},{"location":"conceptual_guides/02_conceptual_architecture/#3-the-three-mandatory-transaction-dates","title":"3. The Three Mandatory Transaction Dates","text":"<p>For accurate financial reconciliation and treasury reporting, the transaction resource exposes three distinct date fields. ERP integrators must understand the context of each date for compliance and cash positioning <sup>4</sup>:</p> Field Name Context Source <code>transaction_date</code> Initiation: The date/time the customer/ERP initiated the activity. Core System / Client Request <code>value_date</code> Interest/Funds: The date on which funds are technically applied or debited for interest accrual calculation.<sup>4</sup> Fiserv CoreAdvance <code>posting_date</code> Availability/Statement: The date/time the transaction record was loaded by the mETL engine into the QBank Connect DB and became available via the API (1:00 am cutoff).<sup>5</sup> <sup>9</sup> QBank Connect DB (mETL) <p>When querying transactions, you should typically use the <code>posting_date</code> field for pagination and filtering to ensure you only retrieve fully synchronized and auditable records.<sup>5</sup></p>"},{"location":"conceptual_guides/02_conceptual_architecture/#references","title":"References","text":"<ol> <li> <p>Fiserv CoreAdvance SFTP Specification, \"Batch Communication Protocol.\"\u00a0\u21a9</p> </li> <li> <p>QBank mETL Engine Design Document, \"Asynchronous Data Integration.\"\u00a0\u21a9</p> </li> <li> <p>QBank Connect SLA, \"API Latency and Data Freshness Profiles.\"\u00a0\u21a9</p> </li> <li> <p>QBank Whitepaper, \"Transaction Date Standards and Compliance,\" v1.1.\u00a0\u21a9\u21a9</p> </li> <li> <p>QBank Connect Integration Guide, \"Transaction Query Best Practices.\"\u00a0\u21a9\u21a9</p> </li> <li> <p>QBank Performance Testing Report, \"Real-Time Endpoint Benchmarks.\"\u00a0\u21a9</p> </li> <li> <p>Fiserv CoreAdvance API Integration Guide, \"Direct Connect Latency.\"\u00a0\u21a9</p> </li> <li> <p>QBank mETL Operational Handbook, \"Daily Sync and EOD Cutoff.\"\u00a0\u21a9</p> </li> <li> <p>QBank Accounting Compliance Memo, \"Posting Date Audit Requirement.\"\u00a0\u21a9</p> </li> </ol>"},{"location":"conceptual_guides/03_payment_workflow/","title":"Payment Workflows: Integrity and Webhooks","text":"<p>This guide covers the non-negotiable requirements for submitting financial transactions, ensuring exactly-once execution and tracking payment status via our finite state machine.<sup>1</sup></p>"},{"location":"conceptual_guides/03_payment_workflow/#1-transactional-idempotency-protocol","title":"1. Transactional Idempotency Protocol","text":"<p>For all mutable operations (<code>POST</code>, <code>PUT</code>, <code>PATCH</code>), the <code>Idempotency-Key</code> header is mandatory. This protects your system from network failures, allowing safe request retries without creating duplicate payments.<sup>2</sup><sup>3</sup></p>"},{"location":"conceptual_guides/03_payment_workflow/#11-header-requirement","title":"1.1. Header Requirement","text":"Header Value Format Mandatory Purpose <code>Idempotency-Key</code> UUID v4 (36 characters) YES Ensures exactly-once execution, acting as a unique database constraint.<sup>2</sup>"},{"location":"conceptual_guides/03_payment_workflow/#12-conflict-resolution-http-409","title":"1.2. Conflict Resolution (HTTP 409)","text":"<p>If you submit a payment request, but the network connection times out, your system may automatically retry. If the first request was received and is currently being processed by the mETL engine, the API will reject the retry attempt with a <code>409 Conflict</code>.</p> <p>Client Action: When receiving a <code>409 Conflict</code>, DO NOT retry the submission immediately. Instead, use the related status endpoint (<code>GET /payments/{id}</code>) to check the status of the original request.<sup>1</sup></p> <p>Mandatory 409 Response Structure</p> <p>The response body adheres to the standardized <code>application/problem+json</code> format:</p> <pre><code>HTTP/1.1 409 Conflict\nLink: https://docs.qbankconnect.com/03_payment_workflow.md#transactional-idempotency-protocol; rel=\"describedby\"\nContent-Type: application/problem+json\n\n{\n\"type\": \"https://api.qbankconnect.com/errors/idempotency_conflict\",\n\"title\": \"A request is outstanding for this Idempotency-Key\",\n\"status\": 409,\n\"detail\": \"The payment submission with this key is already in the P_VALIDATED or P_SUBMITTED_TO_CORE state.\",\n\"instance\": \"a2b3c4d5-6e7f-8g9h-0i1j-2k3l4m5n6o7p\"\n}\n</code></pre>"},{"location":"conceptual_guides/03_payment_workflow/#2-payment-orchestration-state-machine","title":"2. Payment Orchestration State Machine","text":"<p>All asynchronous payment requests (ACH, Positive Pay issues) are tracked by the Payment Orchestration Service (POS) through a defined finite-state machine. <sup>4</sup> <sup>5</sup></p> State Transition Event Actor/System Latency <code>P_CREATED</code> <code>POST /payments/ach</code> is received. ERP Platform / API Instant <code>P_VALIDATED</code> Input validation (schema, funds check) succeeds. QBank Connect Service Sub-second <code>P_SUBMITTED_TO_CORE</code> mETL Job successfully places the batch file in the Fiserv SFTP location. mETL Engine 15 minutes (Max) <code>P_PROCESSING</code> Fiserv CoreAdvance acknowledges receipt and begins processing. Fiserv CoreAdvance Variable (EOD) <code>P_COMPLETED</code> Final settlement confirmation received. mETL / POS Next Business Day <code>P_FAILED</code> Core Rejection or validation failure. CoreAdvance / POS Immediate or Batch"},{"location":"conceptual_guides/03_payment_workflow/#3-payable-confirmation-webhooks","title":"3. Payable Confirmation Webhooks","text":"<p>For time-sensitive payables, QBank Connect provides guaranteed delivery of status updates via webhooks. <sup>1</sup></p>"},{"location":"conceptual_guides/03_payment_workflow/#31-webhook-event","title":"3.1. Webhook Event","text":"<p>When a key state transition occurs (e.g., from <code>P_PROCESSING</code> to <code>P_COMPLETED</code>), the Webhook Notification Service (WNS) sends an event payload to your registered callback URL.</p> Header Purpose <code>Webhook-Event-ID</code> Unique identifier for this webhook delivery attempt. <code>Webhook-Signature</code> HMAC signature used to verify the payload's origin and integrity."},{"location":"conceptual_guides/03_payment_workflow/#32-security-mandate-signature-verification","title":"3.2. Security Mandate: Signature Verification","text":"<p>To prevent spoofing and ensure non-repudiation, you must verify the <code>Webhook-Signature</code> header against the payload using your QBank-provided shared secret. Events received without a valid signature must be discarded.</p>"},{"location":"conceptual_guides/03_payment_workflow/#references","title":"References","text":"<ol> <li> <p>QBank Connect API Reference, \"Payment Status and Webhook Integration.\"\u00a0\u21a9\u21a9\u21a9</p> </li> <li> <p>Idempotency Key Specification, RFC 8142 (Conceptual Reference).\u00a0\u21a9\u21a9</p> </li> <li> <p>Payments API Integration Guide, \"Handling Duplicate Submissions.\"\u00a0\u21a9</p> </li> <li> <p>Payment Orchestration Service (POS) State Diagram, Internal Document.\u00a0\u21a9</p> </li> <li> <p>Fiserv CoreAdvance Batch Processing Guide, \"Payment Lifecycle States.\"\u00a0\u21a9</p> </li> </ol>"},{"location":"sdk_integration/sdk_python/","title":"Python SDK Integration Guide","text":"<p>The QBank Python SDK is built to be type-safe and idiomatic, abstracting away OAuth 2.0 complexity and automatically managing transactional integrity.<sup>1</sup> <sup>2</sup></p>"},{"location":"sdk_integration/sdk_python/#1-installation-and-setup","title":"1. Installation and Setup","text":"<p>The SDK is available on PyPI:</p> <pre><code>pip install qbank-connect\n</code></pre> <p>Initialize the client using your <code>client_id</code> and <code>client_secret</code>. The SDK automatically initiates the OAuth 2.0 Client Credentials flow and handles token caching and refresh.<sup>3</sup></p> <pre><code>from qbank_connect import QBankConnectClient\nfrom qbank_connect.models import AchPaymentRequest\nfrom qbank_connect.errors import QBankIdempotencyConflict, QBankPermissionDeniedError\n\n# Client initializes and immediately fetches a Bearer Token\nclient = QBankConnectClient(\n    client_id=\"YOUR_CLIENT_ID\",\n    client_secret=\"YOUR_CLIENT_SECRET\",\n    scopes=[\"payments.ach.write\", \"balances.read\"]\n)\n</code></pre>"},{"location":"sdk_integration/sdk_python/#2-idempotency-abstraction-crucial","title":"2. Idempotency Abstraction (Crucial)","text":"<p>For all transactional methods (e.g., <code>client.payments.create_ach()</code>), the SDK automatically generates a new UUID for the <code>Idempotency-Key</code> header on every call, unless you explicitly provide one for a retry scenario.<sup>4</sup></p>"},{"location":"sdk_integration/sdk_python/#21-safe-ach-submission-automatic-idempotency","title":"2.1. Safe ACH Submission (Automatic Idempotency)","text":"<pre><code># The SDK automatically generates a new Idempotency-Key for this call. \nach_request = AchPaymentRequest(\n    source_account_id=\"...\",\n    recipient_details={...},\n    amount=1000.50,\n    effective_date=\"2025-10-31\"\n)\n\ntry:\n    response = client.payments.create_ach(request=ach_request)\n    print(f\"Payment request accepted. Status: {response.status}\")\nexcept QBankIdempotencyConflict as e:\n    # If a 409 Conflict is received, this exception is raised.\n    # We catch it and check status instead of retrying immediately.\n    print(f\"Conflict detected. Checking transaction status: {e.detail}\")\n    # Logic to call client.payments.get_payment_status(e.transaction_id)\nexcept QBankPermissionDeniedError:\n    print(\"Authentication error: Check scopes and token.\")\n</code></pre>"},{"location":"sdk_integration/sdk_python/#3-type-safety-and-named-exceptions","title":"3. Type Safety and Named Exceptions","text":"<p>The Python SDK uses Pydantic models for data objects.<sup>1</sup> This ensures you benefit from type checking in your IDE, which significantly reduces the frequency of <code>400 Bad Request</code> errors.<sup>1</sup></p> <p>The SDK translates all generic HTTP status codes (e.g., 403, 409, 500) into specific, actionable, named exceptions (e.g., <code>QBankIdempotencyConflict</code> for a 409).<sup>1</sup> This allows developers to handle failures using idiomatic Python <code>try/except</code> blocks, focusing on application logic rather than fragile string parsing.<sup>2</sup> Refer to the Canonical Error Mapping in the API Reference for a full list of status code translations.</p>"},{"location":"sdk_integration/sdk_python/#references","title":"References","text":"<ol> <li> <p>QBank Developer Documentation, \"Error Code Directory.\"\u00a0\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p>QBank Python SDK Readme, \"Core Features and Design Principles.\"\u00a0\u21a9\u21a9</p> </li> <li> <p>PCI DSS Requirement 10: Track and Monitor All Access to Network Resources and Cardholder Data.\u00a0\u21a9</p> </li> <li> <p>Python SDK Source Code, <code>qbank_connect/payments.py</code> (Idempotency Logic).\u00a0\u21a9</p> </li> </ol>"},{"location":"sdk_integration/sdk_typescript/","title":"TypeScript SDK Integration Guide","text":"<p>The QBank TypeScript SDK is designed for seamless integration into modern Node.js and browser environments, ensuring Type Safety through automatic schema generation and robust Abstraction of the underlying API complexities.<sup>1</sup> <sup>2</sup></p>"},{"location":"sdk_integration/sdk_typescript/#1-installation-and-setup","title":"1. Installation and Setup","text":"<p>Install the SDK using npm or yarn:</p> <pre><code>npm install @qbank/connect\n\n# or\n\nyarn add @qbank/connect\n</code></pre> <p>Initialize the client using your <code>clientId</code> and <code>clientSecret</code>. The SDK manages the entire OAuth 2.0 Client Credentials token lifecycle automatically, including caching and refreshing the Bearer token before it expires.<sup>3</sup></p> <pre><code>import { QBankConnectClient, IdempotencyKeyConflictError, PermissionDeniedError } from '@qbank/connect';\nimport { AchPaymentRequest } from './models'; // Auto-generated model interfaces\n\n// Client initializes and manages the token automatically\nconst client = new QBankConnectClient({\n  clientId: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n  scopes: ['payments.ach.write', 'balances.read'],\n});\n</code></pre>"},{"location":"sdk_integration/sdk_typescript/#2-idiomatic-idempotency-handling","title":"2. Idiomatic Idempotency Handling","text":"<p>For all transactional endpoints (<code>POST</code>, <code>PUT</code>), the SDK ensures transactional integrity by managing the <code>Idempotency-Key</code> header automatically.</p> <ul> <li> <p>First Attempt: The SDK generates a new UUID for the header if the key is not explicitly provided.</p> </li> <li> <p>Retries: If a network failure occurs, the client should retry using the same <code>Idempotency-Key</code> to ensure the payment is processed exactly once.<sup>4</sup> <sup>5</sup></p> </li> </ul>"},{"location":"sdk_integration/sdk_typescript/#21-safe-payment-submission-manual-retry-example","title":"2.1. Safe Payment Submission (Manual Retry Example)","text":"<pre><code>const requestKey = crypto.randomUUID();\nconst achRequest: AchPaymentRequest = {\n  sourceAccountId: '...',\n  recipientDetails: { /*... */ },\n  amount: 500.25,\n  effectiveDate: '2025-11-05',\n};\n\nasync function createPaymentWithRetry(key: string, request: AchPaymentRequest) {\n  try {\n    const response = await client.payments.createAch(request, {\n      idempotencyKey: key, // Supply key for idempotency guarantee\n    });\n    console.log('Payment accepted. Status:', response.status);\n    return response;\n  } catch (error) {\n    if (error instanceof IdempotencyKeyConflictError) {\n      // The API returned a 409 Conflict. DO NOT retry submission.\n      console.warn(`Idempotency conflict detected. Reason: ${error.detail}`);\n      // Recommended: Check status using GET /payments/{id}\n    } else if (error instanceof PermissionDeniedError) {\n      // The API returned a 403 Forbidden.\n      throw new Error('Unauthorized API call. Check scopes.');\n    } else {\n      // Handle other errors (e.g., QBankServiceUnavailableError for 5xx)\n      throw error;\n    }\n  }\n}\ncreatePaymentWithRetry(requestKey, achRequest);\n</code></pre>"},{"location":"sdk_integration/sdk_typescript/#3-type-safety-and-structured-errors-dx","title":"3. Type Safety and Structured Errors (DX)","text":"<p>The SDK utilizes strong typing (e.g., Zod schemas) to make API inputs and outputs explicit, allowing errors to be caught during development (in the IDE) rather than at runtime.<sup>1</sup></p> <p>All status-code-based API errors (e.g., 400, 403, 409) are translated into Named Error Classes (<code>IdempotencyKeyConflictError</code>, <code>PermissionDeniedError</code>). This abstraction allows developers to handle failures programmatically using <code>try/catch</code> blocks, avoiding the need to parse raw HTTP status codes or error messages.<sup>1</sup></p>"},{"location":"sdk_integration/sdk_typescript/#references","title":"References","text":"<ol> <li> <p>QBank TypeScript SDK Readme, \"Core Features and Design Principles (Developer Experience).\"\u00a0\u21a9\u21a9\u21a9</p> </li> <li> <p>TypeScript SDK Source Code, <code>src/client.ts</code> (Client Initialization).\u00a0\u21a9</p> </li> <li> <p>OAuth 2.0 Client Credentials Flow, RFC 6749 (Token Lifecycle).\u00a0\u21a9</p> </li> <li> <p>API Design Guidelines, \"Idempotency and Network Failure Handling.\"\u00a0\u21a9</p> </li> <li> <p>QBank Connect API Reference, \"Idempotency-Key Requirements.\"\u00a0\u21a9</p> </li> </ol>"}]}